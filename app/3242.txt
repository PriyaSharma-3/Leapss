from django.shortcuts import render, redirect ,HttpResponse ,  HttpResponseRedirect
from django.contrib import messages
from .models import Addemployee  
from .forms import AddemployeeForm 
from .models import Admin_Login  
from .forms import Admin_LoginForm 
from .models import Leave_App  
from .forms import Leave_AppForm 
from django.conf import settings
from django.core.mail import send_mail
from .filters import ConsumerFilter
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from datetime import datetime
import os 
from django.db import connection
from django.db.models import Count 
from django.urls import reverse


def homePage(request):
    return render(request,"homePage.html")


def adminLogin(request):   
    if request.method == 'POST':
        form = Admin_LoginForm(request.POST)  
        Username = request.POST['Username']
        Password = request.POST['Password']
         
        try:
            salary = Admin_Login.objects.get(Username = Username,Password=Password)
            request.session['Username'] = Username
        except Admin_Login.DoesNotExist:
            salary = None


        if salary is not None:
            return redirect('/adminDashboard')                                           
        else:
            messages.error(request,"Invalid Username or Password")
            return render(request,"adminLogin.html")

    return render(request,"adminLogin.html")

def adminDashboard(request):
    # Username = request.session['Username']
    # print(Username)
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            admin_reg = Admin_Login.objects.get(Username=Username)
            print(admin_reg)
            
     
            total_emp = Addemployee.objects.count()
            print(total_emp)
            
            total_Leave = Leave_App.objects.count()
            print(total_Leave)
            
            dic ={
                'admin_reg':admin_reg,
                'total_emp':total_emp,
                'total_Leave':total_Leave
            }
            
            return render(request,'adminDashboard.html',dic)   
    return render(request,"adminDashboard.html")

    
def addEmployee(request):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            admin_reg = Admin_Login.objects.get(Username=Username)
            print(admin_reg)
            
            return render(request,'addEmployee.html',{'admin_reg':admin_reg})
        
        
    if request.method == "POST":  
        form = AddemployeeForm(request.POST,request.FILES)  
        if form.is_valid():
                Emp_ID = form.cleaned_data.get('Emp_ID')
                Name = form.cleaned_data.get('Name')
                User_name = form.cleaned_data.get('User_name')
                Contact = form.cleaned_data.get('Contact')
                Email = form.cleaned_data.get('Email')
                Designation = form.cleaned_data.get('Designation')
                D_O_B = form.cleaned_data.get('D_O_B')
                Date_of_join = form.cleaned_data.get('Date_of_join')
                Reporting_Dept = form.cleaned_data.get('Reporting_Dept')
                Password = form.cleaned_data.get('Password')
                Confirm_Password = form.cleaned_data.get('Confirm_Password')
                Image = form.cleaned_data.get('Image')
                Address = form.cleaned_data.get('Address')
                department = form.cleaned_data.get('department')
                subject ="Your Account has been created" 
                send_mail(subject, f'User_name:{User_name}\n\nPassword :{Password}\n\n', 'settings.EMAIL_HOST_USER', [Email],fail_silently=False) 
                
                
                
                
                
                form.save()
                return redirect('/adminDashboard') 
        
    else:
        form = AddemployeeForm()  
    return render(request,'addEmployee.html',{'form':form})


def edit(request): 
       
    employees = Addemployee.objects.all()  
    paginator = Paginator(employees,5)

    page = request.GET.get('page')
    try:
        employees = paginator.page(page)
    except PageNotAnInteger:
        employees = paginator.page(1)
    except EmptyPage:
        employees = paginator.page(paginator.num_pages)

    return render(request, 'edit.html', {'employees': employees})


def show_Emp_ID(request):
        Emp_ID = request.POST['Emp_ID'] 
        employee = Addemployee.objects.filter(Emp_ID=Emp_ID)
        return render(request, 'edit.html',{'employees' : employee})
   
        

def editEmployee(request,id):

    employee = Addemployee.objects.get(id=id)  
    return render(request,'editEmployee.html', {'employee':employee}) 
    # return render(request,"editEmployee.html")

def update(request, id):  
   
    employee = Addemployee.objects.get(id=id)  
    if len(employee.Image) > 0:
        os.remove(employee.Image.path)
    form = AddemployeeForm(request.POST, instance = employee)  
    if form.is_valid(): 
        
        form.save()  
        return redirect("/edit")  
    # else:
        # print(form.errors) 
    return render(request, 'editEmployee.html', {'employee': employee})  


def employees(request):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            admin_reg = Admin_Login.objects.get(Username=Username)
            print(admin_reg)
            
            return render(request,'employees.html',{'admin_reg':admin_reg})
        
    return render(request,"employees.html")



def leaveApplicationDetails(request):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            # Emp_ID = request.session['Emp_ID']
            
            leaves = Leave_App.objects.raw("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."department" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" ORDER BY leave."leave_status" ASC """)
           
            # SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;
            
            # cursor = connection.cursor()    
            # cursor.execute("""SELECT leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."department" FROM leave FULL OUTER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" """)
            # row = cursor.fetchall()
            # print(row)
            paginator = Paginator(leaves,5)

            page = request.GET.get('page')
            try:
                leaves = paginator.page(page)
            except PageNotAnInteger:
                leaves = paginator.page(1)
            except EmptyPage:
                leaves = paginator.page(paginator.num_pages)
                
            # return render(request,"removeEmployees.html",{'employees':employees})

            return render(request,'leaveApplicationDetails.html',{'leaves':leaves,'Username':Username})
        
    return render(request,"leaveApplicationDetails.html")


def removeEmployees(request):
    employees = Addemployee.objects.all()  
    paginator = Paginator(employees,5)

    page = request.GET.get('page')
    try:
        employees = paginator.page(page)
    except PageNotAnInteger:
        employees = paginator.page(1)
    except EmptyPage:
        employees = paginator.page(paginator.num_pages)
        
    return render(request,"removeEmployees.html",{'employees':employees})

def remove_Emp_ID(request):
    Emp_ID = request.POST['Emp_ID']
    employee = Addemployee.objects.filter(Emp_ID=Emp_ID)
    return render(request, 'removeEmployees.html',{'employees' : employee})

def destroy(request, id):
          
    employee = Addemployee.objects.get(id=id)  
    if len(employee.Image) > 0:
        os.remove(employee.Image.path)
    employee.delete()  
    return redirect("/removeEmployees") 



def reviewLeaveApplication(request,Emp_ID,id):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            
            dic = {
                'Emp_ID' : Emp_ID,
                'id':id
            }
            leaves = Leave_App.objects.raw("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" where leave."Emp_ID" = %(Emp_ID)s and leave."id" = %(id)s """, dic)


            # else:
                # print(form.errors) 
            return render(request, 'reviewLeaveApplication.html', {'leaves':leaves})  


            # cursor = connection.cursor()    
            # cursor.execute("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID"  """ )
            # row = cursor.fetchall()
            # print(row)
           
            # return render(request,'reviewLeaveApplication.html',{'leaves':leaves,'form':form})
        
    return render(request,"reviewLeaveApplication.html")


def Approve_leave(request,Emp_ID,id):
    # dic = {
    #             'Emp_ID' : Emp_ID
                
    #         }
    
    leave=Leave_App.objects.get(Emp_ID=Emp_ID,id=id)
    leave.leave_status=1
    leave.save()
    return redirect("/leaveApplicationDetails")

def Reject_leave(request,Emp_ID,id):
    leave=Leave_App.objects.get(Emp_ID=Emp_ID,id=id)
    leave.leave_status=2
    # form = Leave_AppForm(request.POST,instance=leave) 
    # if form.is_valid(): 
    #     form.save() 
    comments = request.POST.get('comments')
    leave.comments = comments
    leave.save()
    return redirect("/leaveApplicationDetails")
            
            

def adminlogout(request):
    try:
      del request.session['Username']
    except:
      pass
    return render(request,"adminLogin.html")


#=============================================================================================








def employeeLogin(request):
    if request.method == 'POST':
        form = AddemployeeForm(request.POST)  
        User_name = request.POST['User_name']
        Password = request.POST['Password']
         
        try:
            emp = Addemployee.objects.get(User_name = User_name,Password=Password)
            request.session['User_name'] = User_name
            
            for employee in Addemployee.objects.all().filter(User_name=User_name).values_list('id','Name','Emp_ID'):
                request.session['id'] = employee[0]
                request.session['Name'] = employee[1]
                request.session['Emp_ID'] = employee[2]
                
                print(employee[0],employee[1],employee[2])

        except Addemployee.DoesNotExist:
            emp = None


        if emp is not None:
            return redirect('/sidebar')                                           
        else:
            messages.error(request,"Invalid Username or Password")
            return render(request,"employeeLogin.html")

    return render(request,"employeeLogin.html")


def sidebar(request):   
    Name = request.session['Name']
    Emp_ID = request.session['Emp_ID']
    # leave = Leave_App.objects.filter(Emp_ID=Emp_ID).values('Category').annotate(my_count=Count('Category'))
    Paid_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Paid Leave').count()
    Sick_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Sick Leave').count()
    Half_Day_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Half DayLeave').count()
    Unpaid_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Unpaid Leave').count()
    print(Paid_leave,Sick_leave,Half_Day_leave,Unpaid_leave)
    dic ={
        'Name':Name,
        'Paid_leave':Paid_leave,
        'Sick_leave':Sick_leave,
        'Half_Day_leave':Half_Day_leave,
        'Unpaid_leave':Unpaid_leave
    }
    return render(request,"sidebar.html",dic)

def profileSetting(request):
    if request.session.has_key('Name'):
        if request.method == 'GET':
            Name = request.session['Name']
            emp_reg = Addemployee.objects.get(Name=Name)
            print(emp_reg)
            
            return render(request,'profileSetting.html',{'emp_reg':emp_reg})        
    return render(request,"profileSetting.html",{'Name':Name})


def leaveSection(request):
    Name = request.session['Name']
    return render(request,"leaveSection.html",{'Name':Name})


def leaveApplication(request):
    Name = request.session['Name']
            
    if request.method == "POST": 
        
        form = Leave_AppForm(request.POST)  
        print(form)
        if form.is_valid():
            Category = form.cleaned_data.get('Category')
            From = form.cleaned_data.get('From')
            to = form.cleaned_data.get('to')
            leavedayCategory_From = form.cleaned_data.get('leavedayCategory_From')
            leavedayCategory_to = form.cleaned_data.get('leavedayCategory_to')
            Reason = form.cleaned_data.get('Reason')
            Emp_ID = form.cleaned_data.get('Emp_ID')
            
            # From_date = str(From)
            # From_date = datetime.strptime(From_date, '%Y-%m-%d')
            # From_date = From_date.strftime("%d")
            
            # print(From_date)

            # to_date = str(to)
            # to_date = datetime.strptime(to_date, '%Y-%m-%d')
            # to_date = to_date.strftime("%d")
            
            # print(to_date) 

            # date = int(to_date) - int(From_date)
            # print(date)
        
            
            Leave_count_Category = form.cleaned_data.get('Leave_count_Category')
            print(Leave_count_Category)
            
           
            
            try:  
                form.save()  
                messages.error(request,"Leave Application Sent ..")
                return redirect('/leaveApplication')  
                
            except:  
                messages.error(request,"Leave Application Not Sent ..")
                print(form.errors)
                pass  
        
    else:
        
        form = Leave_AppForm()  
        
    con ={
        'form':form,
        'Name':Name,

        
    }
    return render(request,'leaveApplication.html',con)



def leaveBasket(request):
    
    if request.session.has_key('Name'):
        if request.method == 'GET':
            Name = request.session['Name']
            Emp_ID = request.session['Emp_ID']
            emp_reg1 = Addemployee.objects.get(Name=Name)
            print(emp_reg1)
            
        dic ={
            'Emp_ID':Emp_ID
            
        }

        leavebaskets = Addemployee.objects.raw('SELECT * FROM \"add_employee\" where "Emp_ID" = %(Emp_ID)s ',dic)
       
        print(leavebaskets)
        
    con={
        'leavebaskets':leavebaskets,
        'emp_reg1':emp_reg1,
        'Name':Name
    }
    
    return render(request,"leaveBasket.html",con)
    
    
def approvalStatus(request):
    if request.session.has_key('Name'):
        if request.method == 'GET':
            Name = request.session['Name']
            Emp_ID = request.session['Emp_ID']
            for employee in Addemployee.objects.all().filter(Emp_ID=Emp_ID).values_list('department'):
    
                department = employee[0]
                
            leave = Leave_App.objects.filter(Emp_ID=Emp_ID).order_by('leave_status').values()
            print(leave)
           
            con = {
                'leaves':leave,
                'Name':Name,
                'Emp_ID':Emp_ID,
                'department':department,
                
            }
            
            return render(request,'approvalStatus.html',con)
    
    return render(request,'approvalStatus.html')
 
    # if request.session.has_key('Name'):
    #     if request.method == 'GET':
    #         Name = request.session['Name']
    #         Emp_ID = request.session['Emp_ID']
    #         for employee in Addemployee.objects.all().filter(Emp_ID=Emp_ID).values_list('department'):
    
    #              department = employee[0]
    #              print(department)
    #         for leave in Leave_App.objects.all().filter(Emp_ID=Emp_ID).values_list('Category','From','to','leavedayCategory_From','leavedayCategory_to','Reason','Emp_ID','Leave_count_Category'):
    #             From = leave[1]
    #             to = leave[2]
    #             print(From,to)
    #             print(leave)
    #         # leave = Leave_App.objects.get(Emp_ID=Emp_ID)
    #         # print(leave)
    #         From_date = str(From)
    #         From_date = datetime.strptime(From_date, '%Y-%m-%d')
    #         From_date = From_date.strftime("%d")
            
    #         # # print(From_date)

    #         to_date = str(to)
    #         to_date = datetime.strptime(to_date, '%Y-%m-%d')
    #         to_date = to_date.strftime("%d")
            
    #         # # print(to_date) 

    #         date = int(to_date) - int(From_date)
    #         # print(date)
        
    #         con = {
    #             'leave':leave,
    #             'Name':Name,                            
    #             'From' : From,
    #             'Emp_ID':Emp_ID,
    #             'department':department,
    #             'date':date,
                
    #         }
            
    #         return render(request,'approvalStatus.html',con)
    
    # return render(request,'approvalStatus.html')

def employeelogout(request):
    try:
      del request.session['Name']
    except:
      pass
    return render(request,"employeeLogin.html")







































































































































from django.shortcuts import render, redirect ,HttpResponse ,  HttpResponseRedirect
from django.contrib import messages
from .models import Addemployee  
from .forms import AddemployeeForm 
from .models import Admin_Login  
from .forms import Admin_LoginForm 
from .models import Leave_App  
from .forms import Leave_AppForm 
from django.conf import settings
from django.core.mail import send_mail
from .filters import ConsumerFilter
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from datetime import datetime
import os 
from django.db import connection
from django.db.models import Count 
from django.urls import reverse


def homePage(request):
    return render(request,"homePage.html")


def adminLogin(request):   
    if request.method == 'POST':
        form = Admin_LoginForm(request.POST)  
        Username = request.POST['Username']
        Password = request.POST['Password']
         
        try:
            salary = Admin_Login.objects.get(Username = Username,Password=Password)
            request.session['Username'] = Username
        except Admin_Login.DoesNotExist:
            salary = None


        if salary is not None:
            return redirect('/adminDashboard')                                           
        else:
            messages.error(request,"Invalid Username or Password")
            return render(request,"adminLogin.html")

    return render(request,"adminLogin.html")

def adminDashboard(request):
    # Username = request.session['Username']
    # print(Username)
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            admin_reg = Admin_Login.objects.get(Username=Username)
            print(admin_reg)
            
     
            total_emp = Addemployee.objects.count()
            print(total_emp)
            
            total_Leave = Leave_App.objects.count()
            print(total_Leave)
            
            dic ={
                'admin_reg':admin_reg,
                'total_emp':total_emp,
                'total_Leave':total_Leave
            }
            
            return render(request,'adminDashboard.html',dic)   
    return render(request,"adminDashboard.html")

    
def addEmployee(request):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            admin_reg = Admin_Login.objects.get(Username=Username)
            print(admin_reg)
            
            return render(request,'addEmployee.html',{'admin_reg':admin_reg})
        
        
    if request.method == "POST":  
        form = AddemployeeForm(request.POST,request.FILES)  
        if form.is_valid():
                Emp_ID = form.cleaned_data.get('Emp_ID')
                Name = form.cleaned_data.get('Name')
                User_name = form.cleaned_data.get('User_name')
                Contact = form.cleaned_data.get('Contact')
                Email = form.cleaned_data.get('Email')
                Designation = form.cleaned_data.get('Designation')
                D_O_B = form.cleaned_data.get('D_O_B')
                Date_of_join = form.cleaned_data.get('Date_of_join')
                Reporting_Dept = form.cleaned_data.get('Reporting_Dept')
                Password = form.cleaned_data.get('Password')
                Confirm_Password = form.cleaned_data.get('Confirm_Password')
                Image = form.cleaned_data.get('Image')
                Address = form.cleaned_data.get('Address')
                department = form.cleaned_data.get('department')
                subject ="Your Account has been created" 
                send_mail(subject, f'User_name:{User_name}\n\nPassword :{Password}\n\n', 'settings.EMAIL_HOST_USER', [Email],fail_silently=False) 
                
                form.save()
                return redirect('/adminDashboard') 
        
    else:
        form = AddemployeeForm()  
    return render(request,'addEmployee.html',{'form':form})


def edit(request): 
       
    employees = Addemployee.objects.all()  
    paginator = Paginator(employees,5)

    page = request.GET.get('page')
    try:
        employees = paginator.page(page)
    except PageNotAnInteger:
        employees = paginator.page(1)
    except EmptyPage:
        employees = paginator.page(paginator.num_pages)

    return render(request, 'edit.html', {'employees': employees})


def show_Emp_ID(request):
        Emp_ID = request.POST['Emp_ID'] 
        employee = Addemployee.objects.filter(Emp_ID=Emp_ID)
        return render(request, 'edit.html',{'employees' : employee})
   
        

def editEmployee(request,id):

    employee = Addemployee.objects.get(id=id)  
    return render(request,'editEmployee.html', {'employee':employee}) 
    # return render(request,"editEmployee.html")

def update(request, id):  
   
    employee = Addemployee.objects.get(id=id)  
    if len(employee.Image) > 0:
        os.remove(employee.Image.path)
    form = AddemployeeForm(request.POST, instance = employee)  
    if form.is_valid(): 
        
        form.save()  
        return redirect("/edit")  
    # else:
        # print(form.errors) 
    return render(request, 'editEmployee.html', {'employee': employee})  


def employees(request):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            admin_reg = Admin_Login.objects.get(Username=Username)
            print(admin_reg)
            
            return render(request,'employees.html',{'admin_reg':admin_reg})
        
    return render(request,"employees.html")



def leaveApplicationDetails(request):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            # Emp_ID = request.session['Emp_ID']
            
            leaves = Leave_App.objects.raw("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."department" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" ORDER BY leave."leave_status" ASC """)
           
            # SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;
            
            # cursor = connection.cursor()    
            # cursor.execute("""SELECT leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."department" FROM leave FULL OUTER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" """)
            # row = cursor.fetchall()
            # print(row)

            return render(request,'leaveApplicationDetails.html',{'leaves':leaves,'Username':Username})
        
    return render(request,"leaveApplicationDetails.html")


def removeEmployees(request):
    employees = Addemployee.objects.all()  
    paginator = Paginator(employees,5)

    page = request.GET.get('page')
    try:
        employees = paginator.page(page)
    except PageNotAnInteger:
        employees = paginator.page(1)
    except EmptyPage:
        employees = paginator.page(paginator.num_pages)
        
    return render(request,"removeEmployees.html",{'employees':employees})

def remove_Emp_ID(request):
    Emp_ID = request.POST['Emp_ID']
    employee = Addemployee.objects.filter(Emp_ID=Emp_ID)
    return render(request, 'removeEmployees.html',{'employees' : employee})

def destroy(request, id):
          
    employee = Addemployee.objects.get(id=id)  
    if len(employee.Image) > 0:
        os.remove(employee.Image.path)
    employee.delete()  
    return redirect("/removeEmployees") 



def reviewLeaveApplication(request,Emp_ID,id):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Username = request.session['Username']
            
            dic = {
                'Emp_ID' : Emp_ID,
                'id':id
            }
            leaves = Leave_App.objects.raw("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" where leave."Emp_ID" = %(Emp_ID)s and leave."id" = %(id)s """, dic)

           
            # cursor = connection.cursor()    
            # cursor.execute("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID"  """ )
            # row = cursor.fetchall()
            # print(row)
           
            return render(request,'reviewLeaveApplication.html',{'leaves':leaves})
        
    return render(request,"reviewLeaveApplication.html")


def Approve_leave(request,Emp_ID,id):
    
    leave=Leave_App.objects.get(Emp_ID=Emp_ID,id=id)
    leave.leave_status=1
    leave.save()

    return redirect("/leaveApplicationDetails")

def Reject_leave(request,Emp_ID,id):
    comments = request.POST.get('comments')
    print(comments)
    leave=Leave_App.objects.get(Emp_ID=Emp_ID,id=id)
    leave.leave_status=2
    leave.comments = comments
    leave.save()
    return redirect("/leaveApplicationDetails")
            
            

def adminlogout(request):
    try:
      del request.session['Username']
    except:
      pass
    return render(request,"adminLogin.html")


#=============================================================================================








def employeeLogin(request):
    if request.method == 'POST':
        form = AddemployeeForm(request.POST)  
        User_name = request.POST['User_name']
        Password = request.POST['Password']
         
        try:
            emp = Addemployee.objects.get(User_name = User_name,Password=Password)
            request.session['User_name'] = User_name
            
            for employee in Addemployee.objects.all().filter(User_name=User_name).values_list('id','Name','Emp_ID'):
                request.session['id'] = employee[0]
                request.session['Name'] = employee[1]
                request.session['Emp_ID'] = employee[2]
                
                print(employee[0],employee[1],employee[2])

        except Addemployee.DoesNotExist:
            emp = None


        if emp is not None:
            return redirect('/sidebar')                                           
        else:
            messages.error(request,"Invalid Username or Password")
            return render(request,"employeeLogin.html")

    return render(request,"employeeLogin.html")


def sidebar(request):   
    Name = request.session['Name']
    Emp_ID = request.session['Emp_ID']
    
    leave = Leave_App.objects.filter(Emp_ID=Emp_ID,leave_status=1).annotate(my_count=Count('Category'))
    Paid_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Paid Leave',leave_status=1).count()
    Sick_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Sick Leave',leave_status=1).count()
    Half_Day_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Half DayLeave',leave_status=1).count()
    Unpaid_leave = Leave_App.objects.filter(Emp_ID=Emp_ID,Category='Unpaid Leave',leave_status=1).count()
   
    
    leave = Addemployee.objects.all().filter(Emp_ID=Emp_ID).values_list('Total_Paid_Leave','Total_Sick_Leave','Total_HalfDay_Leave','Total_Unpaid_Leave')
    print(leave)
        
        
    Paid_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Paid Leave').values('Leave_count_Category')

    Paid_leave1 = Paid_leave_days[0]
    for i in Paid_leave1:
        total_Paid_leave = Paid_leave1[i]
        print(total_Paid_leave)
    
    Sick_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Sick Leave').values('Leave_count_Category')

    Sick_leave1 = Sick_leave_days[0]
    for i in Sick_leave1:
        total_Sick_leave = Sick_leave1[i]
        print(total_Sick_leave)

    Half_Day_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Half DayLeave').values('Leave_count_Category')

    Half_Day_leave1 = Half_Day_leave_days[0]
    for i in Half_Day_leave1:
        total_Half_Day_leave = Half_Day_leave1[i]
        print(total_Half_Day_leave)
        
    Unpaid_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Unpaid Leave').values('Leave_count_Category')

    Unpaid_leave1 = Unpaid_leave_days[0]
    for i in Unpaid_leave1:
        total_Unpaid_leave = Unpaid_leave1[i]
        print(total_Unpaid_leave)


    dic ={
        'Name':Name,
        'total_Paid_leave' : total_Paid_leave,
        'total_Sick_leave':total_Sick_leave,
        'total_Half_Day_leave':total_Half_Day_leave,
        'total_Unpaid_leave':total_Unpaid_leave,
     
    }
    return render(request,"sidebar.html",dic)

def profileSetting(request):
    if request.session.has_key('Name'):
        if request.method == 'GET':
            Name = request.session['Name']
            emp_reg = Addemployee.objects.get(Name=Name)
            print(emp_reg)
            
            return render(request,'profileSetting.html',{'emp_reg':emp_reg})        
    return render(request,"profileSetting.html",{'Name':Name})


def leaveSection(request):
    Name = request.session['Name']
    return render(request,"leaveSection.html",{'Name':Name})


def leaveApplication(request):
    Name = request.session['Name']
            
    if request.method == "POST": 
        
        form = Leave_AppForm(request.POST)  
        print(form)
        if form.is_valid():
            Category = form.cleaned_data.get('Category')
            From = form.cleaned_data.get('From')
            to = form.cleaned_data.get('to')
            leavedayCategory_From = form.cleaned_data.get('leavedayCategory_From')
            leavedayCategory_to = form.cleaned_data.get('leavedayCategory_to')
            Reason = form.cleaned_data.get('Reason')
            Emp_ID = form.cleaned_data.get('Emp_ID')
            
            # From_date = str(From)
            # From_date = datetime.strptime(From_date, '%Y-%m-%d')
            # From_date = From_date.strftime("%d")
            
            # print(From_date)

            # to_date = str(to)
            # to_date = datetime.strptime(to_date, '%Y-%m-%d')
            # to_date = to_date.strftime("%d")
            
            # print(to_date) 

            # date = int(to_date) - int(From_date)
            # print(date)
        
            
            Leave_count_Category = form.cleaned_data.get('Leave_count_Category')
            print(Leave_count_Category)
            
           
            
            try:  
                form.save()  
                return redirect('/approvalStatus')  
                
            except:  
                print(form.errors)
                pass  
        
    else:
        
        form = Leave_AppForm()  
        
    con ={
        'form':form,
        'Name':Name,

        
    }
    return render(request,'leaveApplication.html',con)



def leaveBasket(request): 
    if request.session.has_key('Name'):
        if request.method == 'GET':
            Name = request.session['Name']
            Emp_ID = request.session['Emp_ID']
            emp_reg1 = Addemployee.objects.get(Name=Name)
            # print(emp_reg1)
            
        
        leavebaskets = Addemployee.objects.filter(Emp_ID=Emp_ID)
        
        leave = Addemployee.objects.all().filter(Emp_ID=Emp_ID).values_list('Total_Paid_Leave','Total_Sick_Leave','Total_HalfDay_Leave','Total_Unpaid_Leave')
        print(leave)
    
        Paid_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Paid Leave').values('Leave_count_Category')

        Paid_leave1 = Paid_leave_days[0]
        for i in Paid_leave1:
            print(Paid_leave1[i])
        
        Sick_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Sick Leave').values('Leave_count_Category')

        Sick_leave1 = Sick_leave_days[0]
        for i in Sick_leave1:
            print(Sick_leave1[i])

        Half_Day_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Half DayLeave').values('Leave_count_Category')

        Half_Day_leave1 = Half_Day_leave_days[0]
        for i in Half_Day_leave1:
            print(Half_Day_leave1[i])
            
        Unpaid_leave_days = Leave_App.objects.all().filter(Emp_ID=Emp_ID,Category='Unpaid Leave').values('Leave_count_Category')

        Unpaid_leave1 = Unpaid_leave_days[0]
        for i in Unpaid_leave1:
            print(Unpaid_leave1[i])


        pending_Paid_leave = int(leave[0][0])-int(Paid_leave1[i])
        pending_Sick_leave = int(leave[0][1])-int(Sick_leave1[i])
        pending_Half_Day_leave = int(leave[0][2])-int(Half_Day_leave1[i])
        pending_Unpaid_leave = int(leave[0][3])-int(Unpaid_leave1[i])

        print(Paid_leave_days,pending_Sick_leave,pending_Half_Day_leave,pending_Unpaid_leave)

        # ,int(leave[0][1])-1,int(leave[0][2])-1,int(leave[0][3])-1


        dic ={
            'Name':Name,
            'leavebaskets':leavebaskets,
            'emp_reg1':emp_reg1,
            'pending_Paid_leave':pending_Paid_leave,
            'pending_Sick_leave':pending_Sick_leave,
            'pending_Half_Day_leave':pending_Half_Day_leave,
            'pending_Unpaid_leave':pending_Unpaid_leave
        }

    
    return render(request,"leaveBasket.html",dic)
    

    
def approvalStatus(request):
    if request.session.has_key('Name'):
        if request.method == 'GET':
            Name = request.session['Name']
            Emp_ID = request.session['Emp_ID']
            for employee in Addemployee.objects.all().filter(Emp_ID=Emp_ID).values_list('department'):
                
                department = employee[0]
                
            leave = Leave_App.objects.filter(Emp_ID=Emp_ID).order_by('leave_status').values()
            print(leave)
           
            con = {
                'leaves':leave,
                'Name':Name,
                'Emp_ID':Emp_ID,
                'department':department,
                
            }
            
            return render(request,'approvalStatus.html',con)
    
    return render(request,'approvalStatus.html')


def reviewEmployeeApplication(request,Emp_ID,id):
    if request.session.has_key('Username'):
        if request.method == 'GET':
            Name = request.session['Name']
            
            dic = {
                'Emp_ID' : Emp_ID,
                'id':id
            }
            leaves = Leave_App.objects.raw("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" where leave."Emp_ID" = %(Emp_ID)s and leave."id" = %(id)s """, dic)

           
            # cursor = connection.cursor()    
            # cursor.execute("""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID"  """ )
            # row = cursor.fetchall()
            # print(row)
           
            return render(request,'reviewEmployeeApplication.html',{'leaves':leaves})
        
    return render(request,"reviewEmployeeApplication.html")
 
    # if request.session.has_key('Name'):
    #     if request.method == 'GET':
    #         Name = request.session['Name']
    #         Emp_ID = request.session['Emp_ID']
    #         for employee in Addemployee.objects.all().filter(Emp_ID=Emp_ID).values_list('department'):
    
    #              department = employee[0]
    #              print(department)
    #         for leave in Leave_App.objects.all().filter(Emp_ID=Emp_ID).values_list('Category','From','to','leavedayCategory_From','leavedayCategory_to','Reason','Emp_ID','Leave_count_Category'):
    #             From = leave[1]
    #             to = leave[2]
    #             print(From,to)
    #             print(leave)
    #         # leave = Leave_App.objects.get(Emp_ID=Emp_ID)
    #         # print(leave)
    #         From_date = str(From)
    #         From_date = datetime.strptime(From_date, '%Y-%m-%d')
    #         From_date = From_date.strftime("%d")
            
    #         # # print(From_date)

    #         to_date = str(to)
    #         to_date = datetime.strptime(to_date, '%Y-%m-%d')
    #         to_date = to_date.strftime("%d")
            
    #         # # print(to_date) 

    #         date = int(to_date) - int(From_date)
    #         # print(date)
        
    #         con = {
    #             'leave':leave,
    #             'Name':Name,                            
    #             'From' : From,
    #             'Emp_ID':Emp_ID,
    #             'department':department,
    #             'date':date,
                
    #         }
            
    #         return render(request,'approvalStatus.html',con)
    
    # return render(request,'approvalStatus.html')

def employeelogout(request):
    try:
      del request.session['Name']
    except:
      pass
    return render(request,"employeeLogin.html")


"""SELECT leave."id",leave."Category",leave."From",leave."to",leave."leavedayCategory_From",leave."leavedayCategory_to",leave."Reason",leave."Emp_ID", add_Employee."Name",add_Employee."Contact",add_Employee."Address",add_Employee."D_O_B",add_Employee."Date_of_join",add_Employee."department",add_Employee."Designation",add_Employee."Reporting_Dept",add_Employee."Email",add_Employee."User_name",add_Employee."Password",add_Employee."Confirm_Password",add_Employee."Emp_ID",add_Employee."Image" FROM leave INNER JOIN add_Employee ON leave."Emp_ID" = add_Employee."Emp_ID" where leave."Emp_ID" = %(Emp_ID)s and leave."id" = %(id)s """, dic
